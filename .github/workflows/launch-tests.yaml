name: Launch Own-Git Tests

on:
    push:
        branches: [ main ]
        paths-ignore:
          - 'docs/**'
          - '**.md'
          - '.github/**'
    pull_request:
        branches: [ main ]
        paths-ignore:
          - 'docs/**'
          - '**.md'
          - '.github/**'
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                go-version: '>=1.24'

            - name: Install dependencies
              run: go mod tidy

            - name: Create Artifact folder
              run : mkdir -p artifacts

            - name: Install go-junit-report
              run: go install github.com/jstemmer/go-junit-report/v2@latest

            - name: Run tests
              run: |
                go test -v 2>&1 ./tests/... | go-junit-report -set-exit-code > artifacts/test.xml
            
                # Count passing tests
                TESTS_TOTAL=$(grep -c "<testcase" artifacts/test.xml) || echo 0
                TESTS_FAILED=$(grep -c "<failure" artifacts/test.xml) || echo 0 

                TESTS_PASSED=$((TESTS_TOTAL - TESTS_FAILED))
                
                # Calculate percentage safely
                if [ $TESTS_TOTAL -eq 0 ]; then
                    TESTS_PERCENTAGE=100
                else
                    TESTS_PERCENTAGE=$((TESTS_PASSED * 100 / TESTS_TOTAL))
                fi
                
                echo "TESTS_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
                echo "TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
                echo "TESTS_PERCENTAGE=$TESTS_PERCENTAGE" >> $GITHUB_ENV

            - name: Create Tests Badge
              uses: schneegans/dynamic-badges-action@v1.7.0
              with:
                auth: ${{ secrets.GIST_SECRET }}
                gistID: 3aff3ab94739bdcdd6a9640f0150eeda
                filename: tests.json
                label: Unit-Test
                message: ${{ env.TESTS_PASSED }}/${{ env.TESTS_TOTAL }} (${{ env.TESTS_PERCENTAGE }}%)
                color: ${{ env.TESTS_PERCENTAGE == '100' && 'brightgreen' || env.TESTS_PERCENTAGE >= '90' && 'green' || env.TESTS_PERCENTAGE >= '80' && 'yellowgreen' || env.TESTS_PERCENTAGE >= '70' && 'yellow' || env.TESTS_PERCENTAGE >= '60' && 'orange' || 'red' }}

            - name: Run tests with coverage
              run: |
                go test -coverprofile=coverage.out -coverpkg=./... ./tests/...
                go tool cover -func=coverage.out > artifacts/coverage.txt

                # Extract coverage percentage for badge
                COVERAGE_PCT=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
                echo "COVERAGE=$COVERAGE_PCT" >> $GITHUB_ENV
                
                # Add coverage to summary
                echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                cat artifacts/coverage.txt >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Create Coverage Badge
              uses: schneegans/dynamic-badges-action@v1.7.0
              with:
                auth: ${{ secrets.GIST_SECRET }}
                gistID: 3aff3ab94739bdcdd6a9640f0150eeda
                filename: coverage.json
                label: Coverage
                message: ${{ env.COVERAGE }}
                color: ${{ env.COVERAGE >= '80%' && 'green' || env.COVERAGE >= '60%' && 'yellow' || 'red' }}
              
            - name: Run benchmarks
              run: |
                go test -bench=. -benchmem -run=^$ ./tests/... > artifacts/benchmarks.txt
                
                # Add benchmarks to summary
                echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                cat artifacts/benchmarks.txt >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY


            - name: Run Security Checks
              uses: securego/gosec@master
              with:
                args: '-no-fail -fmt sarif -out results.sarif ./...'

            - name: Upload Security SARIF file
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: results.sarif

            - name: Show Unit Test Report
              uses: dorny/test-reporter@v2
              if: success() || failure()  
              with:
                name: Go Tests (Unit Tests)       
                path: artifacts/test.xml
                reporter: java-junit       
            