"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[794],{263:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"cli-commands/own_init","title":"own_init","description":"own init","source":"@site/docs/cli-commands/own_init.md","sourceDirName":"cli-commands","slug":"/cli-commands/own_init","permalink":"/Own-Git/docs/cli-commands/own_init","draft":false,"unlisted":false,"editUrl":"https://github.com/alexandreLITHAUD/Own-Git/docs/cli-commands/own_init.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"own_commit","permalink":"/Own-Git/docs/cli-commands/own_commit"},"next":{"title":"own_status","permalink":"/Own-Git/docs/cli-commands/own_status"}}');var o=i(4848),s=i(8453);const r={},c=void 0,l={},a=[{value:"own init",id:"own-init",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Examples",id:"examples",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Auto generated by spf13/cobra on 20-Apr-2025",id:"auto-generated-by-spf13cobra-on-20-apr-2025",level:6}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",h6:"h6",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"own-init",children:"own init"}),"\n",(0,o.jsx)(e.p,{children:"Initialize own-git folder"}),"\n",(0,o.jsx)(e.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsx)(e.p,{children:'Initialize own-git folder. And create multiples folders for objects and refs.\nYou can specify the name of the initial branch, using the --initial-branch flag.\nThe default value is "main".'}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"own init [flags]\n"})}),"\n",(0,o.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"own init --initial-branch ILoveSourceControl\n"})}),"\n",(0,o.jsx)(e.h3,{id:"options",children:"Options"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'  -h, --help                    help for init\n  -b, --initial-branch string   Name of the initial branch (default "main")\n'})}),"\n",(0,o.jsx)(e.h3,{id:"options-inherited-from-parent-commands",children:"Options inherited from parent commands"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"  -c, --config string   Path to the config file\n  -v, --verbose         Verbose mode\n"})}),"\n",(0,o.jsx)(e.h3,{id:"see-also",children:"SEE ALSO"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/Own-Git/docs/cli-commands/own",children:"own"}),"\t - own-git a simple git copycat using go functionalities"]}),"\n"]}),"\n",(0,o.jsx)(e.h6,{id:"auto-generated-by-spf13cobra-on-20-apr-2025",children:"Auto generated by spf13/cobra on 20-Apr-2025"})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>c});var t=i(6540);const o={},s=t.createContext(o);function r(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);